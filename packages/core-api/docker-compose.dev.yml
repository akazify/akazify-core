version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: akazify-postgres
    environment:
      POSTGRES_DB: akazify_core
      POSTGRES_USER: akazify
      POSTGRES_PASSWORD: akazify_dev_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8'
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U akazify -d akazify_core"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - akazify-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: akazify-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - akazify-network

  # Apache Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: akazify-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - akazify-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: akazify-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - akazify-network

  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: akazify-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: akazify-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - akazify-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: akazify-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@akazify.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - akazify-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: akazify-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - akazify-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  akazify-network:
    driver: bridge
